     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, strstr, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll 
    11                                  import strstr msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17                                  
    18 00000000 00000000                    a dd 0
    19 00000004 00000000                    c dd 0
    20 00000008 00                          x db 0
    21 00000009 00                          y db 0
    22 0000000A 613D00                      printformat db "a=", 0
    23 0000000D 256400                      format db "%d", 0
    24                                      
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code 
    28                                      start:
    29 00000000 B902000000                      mov ecx, 2
    30                                         repeta:
    31 00000005 68[0A000000]                        push dword printformat
    32 0000000A FF15[00000000]                      call [printf]
    33 00000010 83C404                              add esp, 4*1
    34                                              
    35 00000013 68[00000000]                        push dword a
    36 00000018 68[0D000000]                        push dword format
    37 0000001D FF15[00000000]                      call [scanf]
    38 00000023 83C408                              add esp, 4*2
    39                                              
    40 00000026 833D[00000000]00                    cmp dword[a], 0
    41 0000002D 0F8626010000                        jbe final
    42                                              
    43 00000033 890D[04000000]                      mov dword[c], ecx
    44 00000039 B900000000                          mov ecx, 0
    45                                              ;push dword a 
    46 0000003E A1[00000000]                        mov eax, [a]
    47 00000043 EB21                                jmp conversie
    48                                              
    49 00000045 A3[00000000]                        mov [a], eax
    50 0000004A FF35[00000000]                      push dword[a]
    51 00000050 68[0A000000]                        push dword printformat
    52 00000055 FF15[00000000]                      call [printf]
    53 0000005B 83C408                              add esp, 4*2
    54                                              
    55 0000005E 8B0D[04000000]                      mov ecx, dword[c]
    56 00000064 E29F                                loop repeta 
    57                                              
    58                                          conversie:
    59                                          ;mov eax, [esp + 4]
    60 00000066 BB00000000                      mov ebx, 0
    61 0000006B A2[08000000]                    mov byte[x], al 
    62 00000070 B101                            mov cl, 1
    63                                          .repeta1:
    64 00000072 B20A                                mov dl, 10
    65 00000074 A0[08000000]                        mov al, byte[x]
    66 00000079 F6F2                                div dl
    67 0000007B A2[08000000]                        mov byte[x], al
    68 00000080 88E0                                mov al, ah
    69 00000082 F6E1                                mul cl
    70 00000084 6699                                cwd 
    71 00000086 01C3                                add ebx, eax 
    72 00000088 00C9                                add cl, cl 
    73 0000008A 803D[08000000]00                    cmp byte[x], 0
    74 00000091 7FDF                                jg .repeta1
    75                                          ;mov eax, ebx
    76 00000093 B101                            mov cl, 1
    77 00000095 881D[08000000]                  mov byte[x], bl
    78 0000009B BB00000000                      mov ebx, 0
    79                                          repeta2:
    80 000000A0 B208                                mov dl, 8
    81 000000A2 A0[08000000]                        mov al, byte[x]
    82 000000A7 F6F2                                div dl
    83 000000A9 A2[08000000]                        mov byte[x], al
    84 000000AE 88E0                                mov al, ah
    85 000000B0 F6E1                                mul cl
    86 000000B2 6699                                cwd 
    87 000000B4 01C3                                add ebx, eax 
    88 000000B6 80F901                              cmp cl, 1
    89 000000B9 754D                                jne skip
    90 000000BB 880D[09000000]                      mov byte[y], cl
    91 000000C1 B100                                mov cl, 0
    92 000000C3 020D[09000000]-                     times 10 add cl, byte[y]  
    92 000000C3 <rept>             
    93 000000FF 803D[08000000]00                    cmp byte[x], 0
    94 00000106 7F98                                jg repeta2
    95                                              skip:
    96 00000108 880D[09000000]                      mov byte[y], cl
    97 0000010E 020D[09000000]-                     times 10 add cl, byte[y]  
    97 0000010E <rept>             
    98 0000014A 803D[08000000]00                    cmp byte[x], 0
    99 00000151 0F8F49FFFFFF                        jg repeta2
   100 00000157 89D8                            mov eax, ebx
   101                                          ;ret
   102                                          
   103                                          final:
   104                                          
   105 00000159 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   106 0000015B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
