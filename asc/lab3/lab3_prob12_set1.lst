     1                                  bits 32 
     2                                  
     3                                  ;Calculati (a+b+d)-(a-c+d)+(b-c)
     4                                  ;Interpretare fara semn
     5                                   
     6                                  global start        
     7                                  extern exit               
     8                                  import exit msvcrt.dll    
     9                                                            
    10                                  segment data use32 class=data
    11 00000000 09                          a DB 9
    12 00000001 0800                        b DW 8
    13 00000003 03000000                    c DD 3
    14 00000007 0A00000000000000            d DQ 10
    15                                  
    16                                  segment code use32 class=code
    17                                      start:
    18 00000000 A0[00000000]                    mov AL, [a]     ; AL = a
    19 00000005 B400                            mov AH, 0       ; conversie fara semn de la AL la AX
    20 00000007 660305[01000000]                add AX, [b]     ; AX = a + b
    21 0000000E 66BA0000                        mov DX, 0       ; conversie fara semn de la AX la DX:AX
    22 00000012 6652                            push DX
    23 00000014 6650                            push AX
    24 00000016 58                              pop EAX         ; EAX = a + b 
    25 00000017 BA00000000                      mov EDX, 0
    26 0000001C 0305[07000000]                  add EAX, dword[d]
    27 00000022 1315[0B000000]                  adc EDX, dword[d + 4]     ; EDX:EAX = a + b + d
    28 00000028 8A1D[00000000]                  mov BL, [a]     ; BL = a
    29 0000002E B700                            mov BH, 0       ; conversie fara semn de la BL la BX
    30 00000030 66B90000                        mov CX, 0       ; conversie fara semn de la BX la CX:BX
    31 00000034 662B1D[03000000]                sub BX, word[c]
    32 0000003B 661B0D[05000000]                sbb CX, word[c + 2]     ; CX:BX = a - c
    33 00000042 6651                            push CX
    34 00000044 6653                            push BX
    35 00000046 5B                              pop EBX         ; EBX = a - c 
    36 00000047 B900000000                      mov ECX, 0
    37 0000004C 031D[07000000]                  add EBX, dword[d]
    38 00000052 130D[0B000000]                  adc ECX, dword[d + 4]     ; CX:BX = a - c + d
    39 00000058 29D8                            sub EAX, EBX
    40 0000005A 19CA                            sbb EDX, ECX              ; EDX:EAX = (a + b + d) - (a - c + d)
    41 0000005C 668B1D[01000000]                mov BX, [b]             ; BX = b
    42 00000063 66B90000                        mov CX, 0               ; conversie de la BX la CX:BX
    43 00000067 662B1D[03000000]                sub BX, word[c]
    44 0000006E 661B0D[05000000]                sbb CX, word[c + 2]     ; CX:BX = b - c
    45 00000075 6653                            push BX
    46 00000077 6651                            push CX
    47 00000079 5B                              pop EBX                 ; EBX = b - c
    48 0000007A B900000000                      mov ECX, 0
    49 0000007F 01D8                            add EAX, EBX
    50 00000081 11CA                            adc EDX, ECX              ; EAX = (a + b + d) - (a - c + d) + (b - c)
    51                                          
    52                                          
    53                                          
    54 00000083 6A00                            push    dword 0      
    55 00000085 FF15[00000000]                  call    [exit]       
