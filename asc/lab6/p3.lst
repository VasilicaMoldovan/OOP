     1                                  bits 32
     2                                  global start 
     3                                  extern exit
     4                                  import exit msvcrt.dll
     5                                  
     6                                  segment data use32 class=data
     7 00000000 0A09020704030C0B08-         sir1 dd 0702090Ah, 0B0C0304h, 05060108h
     7 00000009 010605             
     8                                      len1 equ ($-sir1) / 4
     9 0000000C 00<rept>                    sir2 times 2 * len1 db 0
    10 00000012 00000000                    var dd 0
    11                                  
    12                                  ;Se da un sir de 3 dublucuvinte, fiecare dublucuvant continand 2 valori pe cuvant (despachetate, deci fiecare cifra hexa e precedata de un 0). Sa se creeze un sir de octeti care sa contina acele valori (impachetate 
    13                                  segment code use32 class=code
    14                                      start:
    15 00000000 BE[00000000]                    mov ESI, sir1
    16 00000005 BF[0C000000]                    mov EDI, sir2
    17 0000000A B903000000                      mov ECX, len1
    18 0000000F FC                              cld 
    19                                          repeta:
    20 00000010 AD                                  lodsd   ; in EAX punem dword-ul curent din sir1
    21                                                      ; EAX = 0702 090Ah
    22                                                      ; in AX avem word-ul low, AX := 090Ah
    23                                                      ; ESI = ESI + 1
    24 00000011 89C3                                mov EBX, EAX    ; EBX = EAX = 0702 090Ah
    25 00000013 C1E810                              shr EAX, 16      ; EAX = 0000 0702h, AX = 0702h, AL = 02h, AH = 07h
    26 00000016 C1C804                              ror EAX, 4      ; EAX = 2000 0070h ,AX = 0070h
    27 00000019 89C2                                mov EDX, EAX    ; var = 2000 0070h
    28 0000001B C1E81C                              shr EAX, 28      ; EAX = 0000 0002h
    29 0000001E 01C2                                add EDX, EAX    ; var = 2000 0072h
    30 00000020 89D0                                mov EAX, EDX    ; EAX = 2000 0072h
    31 00000022 AA                                  stosb   ; in EDI punem byte-ul 72h
    32                                                      ; EDI = EDI + 1
    33 00000023 C1E310                              shl EBX, 16      ; EBX = 090A 0000h
    34 00000026 C1CB14                              ror EBX, 20      ; EBX = A000 0090h
    35 00000029 89DA                                mov EDX, EBX    ; var = A000 0090h
    36 0000002B C1EB1C                              shr EBX, 28      ; EBX = 0000 000Ah
    37 0000002E 01DA                                add EDX, EBX    ; var = 0000 009Ah
    38 00000030 89D0                                mov EAX, EDX
    39 00000032 AA                                  stosb   ; in EDI punem byte-ul 9Ah
    40                                                      ; EDI = EDI + 1
    41 00000033 E2DB                                loop repeta
    42                                              
    43                                              
    44 00000035 BA00000000                      mov EDX, 0
    45 0000003A BF[0C000000]                    mov EDI, sir2
    46                                          
    47                                          
    48                                          sort1:
    49 0000003F BA01000000                          mov EDX, 1
    50 00000044 BE00000000                          mov ESI, 0
    51 00000049 B905000000                          mov ECX, 2 * len1 - 1
    52                                              
    53 0000004E E323                                jecxz final
    54                                              
    55                                              sort2:
    56 00000050 8A0437                                  mov AL, [EDI + ESI]     ; AL = a[i]
    57 00000053 3A443701                                cmp AL, [EDI + ESI + 1]
    58                                                  
    59 00000057 7F02                                    jg interschimba
    60 00000059 EB10                                    jmp continua 
    61                                                  interschimba:
    62 0000005B 8A643701                                    mov AH, [EDI + ESI + 1]
    63 0000005F 88443701                                    mov [EDI + ESI + 1], AL
    64 00000063 882437                                      mov [EDI + ESI], AH
    65 00000066 BA00000000                                  mov EDX, 0
    66                                                      
    67                                                  continua:
    68 0000006B 46                                          inc ESI
    69 0000006C E2E2                                loop sort2
    70                                              
    71 0000006E 83FA00                              cmp EDX, 0
    72 00000071 74CC                                je sort1
    73                                              
    74                                            final:
    75                                                 
    76 00000073 6A00                            push    dword 0
    77 00000075 FF15[00000000]                  call    [exit]
